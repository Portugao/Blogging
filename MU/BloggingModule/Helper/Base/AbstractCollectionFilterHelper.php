<?php
/**
 * Blogging.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BloggingModule\Helper\Base;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\HttpFoundation\RequestStack;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Zikula\UsersModule\Constant as UsersConstant;
use MU\BloggingModule\Entity\PostEntity;
use MU\BloggingModule\Helper\CategoryHelper;
use MU\BloggingModule\Helper\PermissionHelper;

/**
 * Entity collection filter helper base class.
 */
abstract class AbstractCollectionFilterHelper
{
    /**
     * @var RequestStack
     */
    protected $requestStack;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * @var CurrentUserApiInterface
     */
    protected $currentUserApi;
    
    /**
     * @var CategoryHelper
     */
    protected $categoryHelper;
    
    /**
     * @var bool Fallback value to determine whether only own entries should be selected or not
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * @var bool Whether to apply a locale-based filter or not
     */
    protected $filterDataByLocale = false;
    
    /**
     * CollectionFilterHelper constructor.
     *
     * @param RequestStack $requestStack RequestStack service instance
     * @param PermissionHelper $permissionHelper PermissionHelper service instance
     * @param CurrentUserApiInterface $currentUserApi CurrentUserApi service instance
     * @param CategoryHelper $categoryHelper CategoryHelper service instance
     * @param boolean $showOnlyOwnEntries Fallback value to determine whether only own entries should be selected or not
     * @param boolean $filterDataByLocale Whether to apply a locale-based filter or not
     */
    public function __construct(
        RequestStack $requestStack,
        PermissionHelper $permissionHelper,
        CurrentUserApiInterface $currentUserApi,
        CategoryHelper $categoryHelper,
        $showOnlyOwnEntries,
        $filterDataByLocale
    ) {
        $this->requestStack = $requestStack;
        $this->permissionHelper = $permissionHelper;
        $this->currentUserApi = $currentUserApi;
        $this->categoryHelper = $categoryHelper;
        $this->showOnlyOwnEntries = $showOnlyOwnEntries;
        $this->filterDataByLocale = $filterDataByLocale;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $objectType Name of treated entity type
     * @param string $context    Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args       Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    public function getViewQuickNavParameters($objectType = '', $context = '', array $args = [])
    {
        if (!in_array($context, ['controllerAction', 'api', 'actionHandler', 'block', 'contentType'])) {
            $context = 'controllerAction';
        }
    
        if ($objectType == 'post') {
            return $this->getViewQuickNavParametersForPost($context, $args);
        }
    
        return [];
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCommonViewFilters($objectType, QueryBuilder $qb)
    {
        if ($objectType == 'post') {
            return $this->addCommonViewFiltersForPost($qb);
        }
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function applyDefaultFilters($objectType, QueryBuilder $qb, array $parameters = [])
    {
        if ($objectType == 'post') {
            return $this->applyDefaultFiltersForPost($qb, $parameters);
        }
    
        return $qb;
    }
    
    /**
     * Returns an array of additional template variables for view quick navigation forms.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType)
     * @param array  $args    Additional arguments
     *
     * @return array List of template variables to be assigned
     */
    protected function getViewQuickNavParametersForPost($context = '', array $args = [])
    {
        $parameters = [];
        $request = $this->requestStack->getCurrentRequest();
        if (null === $request) {
            return $parameters;
        }
    
        $parameters['catId'] = $request->query->get('catId', '');
        $parameters['catIdList'] = $this->categoryHelper->retrieveCategoriesFromRequest('post', 'GET');
        $parameters['workflowState'] = $request->query->get('workflowState', '');
        $parameters['positionOfAdvertising1'] = $request->query->get('positionOfAdvertising1', '');
        $parameters['positionOfBlock'] = $request->query->get('positionOfBlock', '');
        $parameters['positionOfAdvertising2'] = $request->query->get('positionOfAdvertising2', '');
        $parameters['positionOfBlock2'] = $request->query->get('positionOfBlock2', '');
        $parameters['positionOfAdvertising3'] = $request->query->get('positionOfAdvertising3', '');
        $parameters['positionOfBlock3'] = $request->query->get('positionOfBlock3', '');
        $parameters['similarArticles'] = $request->query->get('similarArticles', '');
        $parameters['forWhichLanguage'] = $request->query->get('forWhichLanguage', '');
        $parameters['q'] = $request->query->get('q', '');
    
        return $parameters;
    }
    
    /**
     * Adds quick navigation related filter options as where clauses.
     *
     * @param QueryBuilder $qb Query builder to be enhanced
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function addCommonViewFiltersForPost(QueryBuilder $qb)
    {
        $request = $this->requestStack->getCurrentRequest();
        if (null === $request) {
            return $qb;
        }
        $routeName = $request->get('_route');
        if (false !== strpos($routeName, 'edit')) {
            return $qb;
        }
    
        $parameters = $this->getViewQuickNavParametersForPost();
        foreach ($parameters as $k => $v) {
            if ($k == 'catId') {
                if (intval($v) > 0) {
                    // single category filter
                    $qb->andWhere('tblCategories.category = :category')
                       ->setParameter('category', $v);
                }
                continue;
            }
            if ($k == 'catIdList') {
                // multi category filter
                $qb = $this->categoryHelper->buildFilterClauses($qb, 'post', $v);
                continue;
            }
            if (in_array($k, ['q', 'searchterm'])) {
                // quick search
                if (!empty($v)) {
                    $qb = $this->addSearchFilter('post', $qb, $v);
                }
                continue;
            }
    
            if (is_array($v)) {
                continue;
            }
    
            // field filter
            if ((!is_numeric($v) && $v != '') || (is_numeric($v) && $v > 0)) {
                if ($k == 'workflowState' && substr($v, 0, 1) == '!') {
                    $qb->andWhere('tbl.' . $k . ' != :' . $k)
                       ->setParameter($k, substr($v, 1, strlen($v)-1));
                } elseif (substr($v, 0, 1) == '%') {
                    $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                       ->setParameter($k, '%' . substr($v, 1) . '%');
                } elseif (in_array($k, ['similarArticles'])) {
                    // multi list filter
                    $qb->andWhere('tbl.' . $k . ' LIKE :' . $k)
                       ->setParameter($k, '%' . $v . '%');
                } else {
                    $qb->andWhere('tbl.' . $k . ' = :' . $k)
                       ->setParameter($k, $v);
                }
            }
        }
    
        $qb = $this->applyDefaultFiltersForPost($qb, $parameters);
    
        return $qb;
    }
    
    /**
     * Adds default filters as where clauses.
     *
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param array        $parameters List of determined filter options
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDefaultFiltersForPost(QueryBuilder $qb, array $parameters = [])
    {
        $request = $this->requestStack->getCurrentRequest();
        if (null === $request) {
            return $qb;
        }
        $routeName = $request->get('_route');
        $isAdminArea = false !== strpos($routeName, 'mubloggingmodule_post_admin');
        if ($isAdminArea) {
            return $qb;
        }
    
        $showOnlyOwnEntries = (bool)$request->query->getInt('own', $this->showOnlyOwnEntries);
    
        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved posts only
            $onlineStates = ['approved'];
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
               ->setParameter('onlineStates', $onlineStates);
        }
    
        if ($showOnlyOwnEntries) {
            $qb = $this->addCreatorFilter($qb);
        }
    
        if (true === (bool)$this->filterDataByLocale) {
            $allowedLocales = ['', $request->getLocale()];
            if (!in_array('forWhichLanguage', array_keys($parameters)) || empty($parameters['forWhichLanguage'])) {
                $qb->andWhere('tbl.forWhichLanguage IN (:currentForWhichLanguage)')
                   ->setParameter('currentForWhichLanguage', $allowedLocales);
            }
        }
    
        $qb = $this->applyDateRangeFilterForPost($qb);
    
        return $qb;
    }
    
    /**
     * Applies start and end date filters for selecting posts.
     *
     * @param QueryBuilder $qb    Query builder to be enhanced
     * @param string       $alias Table alias
     *
     * @return QueryBuilder Enriched query builder instance
     */
    protected function applyDateRangeFilterForPost(QueryBuilder $qb, $alias = 'tbl')
    {
        $request = $this->requestStack->getCurrentRequest();
        $startDate = $request->query->get('startDate', date('Y-m-d H:i:s'));
        $qb->andWhere('(' . $alias . '.startDate <= :startDate OR ' . $alias . '.startDate IS NULL)')
           ->setParameter('startDate', $startDate);
    
        $endDate = $request->query->get('endDate', date('Y-m-d H:i:s'));
        $qb->andWhere('(' . $alias . '.endDate >= :endDate OR ' . $alias . '.endDate IS NULL)')
           ->setParameter('endDate', $endDate);
    
        return $qb;
    }
    
    /**
     * Adds a where clause for search query.
     *
     * @param string       $objectType Name of treated entity type
     * @param QueryBuilder $qb         Query builder to be enhanced
     * @param string       $fragment   The fragment to search for
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addSearchFilter($objectType, QueryBuilder $qb, $fragment = '')
    {
        if ($fragment == '') {
            return $qb;
        }
    
        $filters = [];
        $parameters = [];
    
        if ($objectType == 'post') {
            $filters[] = 'tbl.workflowState = :searchWorkflowState';
            $parameters['searchWorkflowState'] = $fragment;
            $filters[] = 'tbl.title LIKE :searchTitle';
            $parameters['searchTitle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.permalink LIKE :searchPermalink';
            $parameters['searchPermalink'] = '%' . $fragment . '%';
            $filters[] = 'tbl.descriptionForGoogle LIKE :searchDescriptionForGoogle';
            $parameters['searchDescriptionForGoogle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.textForSimilar LIKE :searchTextForSimilar';
            $parameters['searchTextForSimilar'] = '%' . $fragment . '%';
            $filters[] = 'tbl.textForRelevant LIKE :searchTextForRelevant';
            $parameters['searchTextForRelevant'] = '%' . $fragment . '%';
            $filters[] = 'tbl.forWhichLanguage LIKE :searchForWhichLanguage';
            $parameters['searchForWhichLanguage'] = '%' . $fragment . '%';
            $filters[] = 'tbl.imageForArticleFileName = :searchImageForArticle';
            $parameters['searchImageForArticle'] = $fragment;
            $filters[] = 'tbl.descriptionOfImageForArticle LIKE :searchDescriptionOfImageForArticle';
            $parameters['searchDescriptionOfImageForArticle'] = '%' . $fragment . '%';
            $filters[] = 'tbl.summaryOfPost LIKE :searchSummaryOfPost';
            $parameters['searchSummaryOfPost'] = '%' . $fragment . '%';
            $filters[] = 'tbl.content LIKE :searchContent';
            $parameters['searchContent'] = '%' . $fragment . '%';
            $filters[] = 'tbl.content2 LIKE :searchContent2';
            $parameters['searchContent2'] = '%' . $fragment . '%';
            $filters[] = 'tbl.advertising LIKE :searchAdvertising';
            $parameters['searchAdvertising'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfAdvertising1 = :searchPositionOfAdvertising1';
            $parameters['searchPositionOfAdvertising1'] = $fragment;
            $filters[] = 'tbl.positionOfBlock = :searchPositionOfBlock';
            $parameters['searchPositionOfBlock'] = $fragment;
            $filters[] = 'tbl.content3 LIKE :searchContent3';
            $parameters['searchContent3'] = '%' . $fragment . '%';
            $filters[] = 'tbl.content4 LIKE :searchContent4';
            $parameters['searchContent4'] = '%' . $fragment . '%';
            $filters[] = 'tbl.advertising2 LIKE :searchAdvertising2';
            $parameters['searchAdvertising2'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfAdvertising2 = :searchPositionOfAdvertising2';
            $parameters['searchPositionOfAdvertising2'] = $fragment;
            $filters[] = 'tbl.positionOfBlock2 = :searchPositionOfBlock2';
            $parameters['searchPositionOfBlock2'] = $fragment;
            $filters[] = 'tbl.content5 LIKE :searchContent5';
            $parameters['searchContent5'] = '%' . $fragment . '%';
            $filters[] = 'tbl.content6 LIKE :searchContent6';
            $parameters['searchContent6'] = '%' . $fragment . '%';
            $filters[] = 'tbl.advertising3 LIKE :searchAdvertising3';
            $parameters['searchAdvertising3'] = '%' . $fragment . '%';
            $filters[] = 'tbl.positionOfAdvertising3 = :searchPositionOfAdvertising3';
            $parameters['searchPositionOfAdvertising3'] = $fragment;
            $filters[] = 'tbl.positionOfBlock3 = :searchPositionOfBlock3';
            $parameters['searchPositionOfBlock3'] = $fragment;
            $filters[] = 'tbl.similarArticles = :searchSimilarArticles';
            $parameters['searchSimilarArticles'] = $fragment;
            $filters[] = 'tbl.startDate = :searchStartDate';
            $parameters['searchStartDate'] = $fragment;
            $filters[] = 'tbl.endDate = :searchEndDate';
            $parameters['searchEndDate'] = $fragment;
            $filters[] = 'tbl.relevantArticles LIKE :searchRelevantArticles';
            $parameters['searchRelevantArticles'] = '%' . $fragment . '%';
        }
    
        $qb->andWhere('(' . implode(' OR ', $filters) . ')');
    
        foreach ($parameters as $parameterName => $parameterValue) {
            $qb->setParameter($parameterName, $parameterValue);
        }
    
        return $qb;
    }
    
    /**
     * Adds a filter for the createdBy field.
     *
     * @param QueryBuilder $qb     Query builder to be enhanced
     * @param integer      $userId The user identifier used for filtering
     *
     * @return QueryBuilder Enriched query builder instance
     */
    public function addCreatorFilter(QueryBuilder $qb, $userId = null)
    {
        if (null === $userId) {
            $userId = $this->currentUserApi->isLoggedIn() ? $this->currentUserApi->get('uid') : UsersConstant::USER_ID_ANONYMOUS;
        }
    
        if (is_array($userId)) {
            $qb->andWhere('tbl.createdBy IN (:userIds)')
               ->setParameter('userIds', $userId);
        } else {
            $qb->andWhere('tbl.createdBy = :userId')
               ->setParameter('userId', $userId);
        }
    
        return $qb;
    }
}
