<?php
/**
 * Blogging.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BloggingModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\BloggingModule\Validator\Constraints as BloggingAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * The amount of posts shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $postEntriesPerPage
     */
    protected $postEntriesPerPage = 10;
    
    /**
     * Whether to add a link to posts of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnPostsOnAccountPage
     */
    protected $linkOwnPostsOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether automatically filter data in the frontend based on the current locale or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $filterDataByLocale
     */
    protected $filterDataByLocale = false;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForPostImageForArticle
     */
    protected $enableShrinkingForPostImageForArticle = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthPostImageForArticle
     */
    protected $shrinkWidthPostImageForArticle = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightPostImageForArticle
     */
    protected $shrinkHeightPostImageForArticle = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @BloggingAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModePostImageForArticle", multiple=false)
     * @var string $thumbnailModePostImageForArticle
     */
    protected $thumbnailModePostImageForArticle = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostImageForArticleView
     */
    protected $thumbnailWidthPostImageForArticleView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostImageForArticleView
     */
    protected $thumbnailHeightPostImageForArticleView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostImageForArticleDisplay
     */
    protected $thumbnailWidthPostImageForArticleDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostImageForArticleDisplay
     */
    protected $thumbnailHeightPostImageForArticleDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostImageForArticleEdit
     */
    protected $thumbnailWidthPostImageForArticleEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostImageForArticleEdit
     */
    protected $thumbnailHeightPostImageForArticleEdit = 180;
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForPosts
     */
    protected $moderationGroupForPosts = 2;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForPost
     */
    protected $allowModerationSpecificCreatorForPost = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForPost
     */
    protected $allowModerationSpecificCreationDateForPost = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @BloggingAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'post';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the post entries per page.
     *
     * @return integer
     */
    public function getPostEntriesPerPage()
    {
        return $this->postEntriesPerPage;
    }
    
    /**
     * Sets the post entries per page.
     *
     * @param integer $postEntriesPerPage
     *
     * @return void
     */
    public function setPostEntriesPerPage($postEntriesPerPage)
    {
        if (intval($this->postEntriesPerPage) !== intval($postEntriesPerPage)) {
            $this->postEntriesPerPage = intval($postEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own posts on account page.
     *
     * @return boolean
     */
    public function getLinkOwnPostsOnAccountPage()
    {
        return $this->linkOwnPostsOnAccountPage;
    }
    
    /**
     * Sets the link own posts on account page.
     *
     * @param boolean $linkOwnPostsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnPostsOnAccountPage($linkOwnPostsOnAccountPage)
    {
        if (boolval($this->linkOwnPostsOnAccountPage) !== boolval($linkOwnPostsOnAccountPage)) {
            $this->linkOwnPostsOnAccountPage = boolval($linkOwnPostsOnAccountPage);
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return boolean
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param boolean $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if (boolval($this->showOnlyOwnEntries) !== boolval($showOnlyOwnEntries)) {
            $this->showOnlyOwnEntries = boolval($showOnlyOwnEntries);
        }
    }
    
    /**
     * Returns the filter data by locale.
     *
     * @return boolean
     */
    public function getFilterDataByLocale()
    {
        return $this->filterDataByLocale;
    }
    
    /**
     * Sets the filter data by locale.
     *
     * @param boolean $filterDataByLocale
     *
     * @return void
     */
    public function setFilterDataByLocale($filterDataByLocale)
    {
        if (boolval($this->filterDataByLocale) !== boolval($filterDataByLocale)) {
            $this->filterDataByLocale = boolval($filterDataByLocale);
        }
    }
    
    /**
     * Returns the enable shrinking for post image for article.
     *
     * @return boolean
     */
    public function getEnableShrinkingForPostImageForArticle()
    {
        return $this->enableShrinkingForPostImageForArticle;
    }
    
    /**
     * Sets the enable shrinking for post image for article.
     *
     * @param boolean $enableShrinkingForPostImageForArticle
     *
     * @return void
     */
    public function setEnableShrinkingForPostImageForArticle($enableShrinkingForPostImageForArticle)
    {
        if (boolval($this->enableShrinkingForPostImageForArticle) !== boolval($enableShrinkingForPostImageForArticle)) {
            $this->enableShrinkingForPostImageForArticle = boolval($enableShrinkingForPostImageForArticle);
        }
    }
    
    /**
     * Returns the shrink width post image for article.
     *
     * @return integer
     */
    public function getShrinkWidthPostImageForArticle()
    {
        return $this->shrinkWidthPostImageForArticle;
    }
    
    /**
     * Sets the shrink width post image for article.
     *
     * @param integer $shrinkWidthPostImageForArticle
     *
     * @return void
     */
    public function setShrinkWidthPostImageForArticle($shrinkWidthPostImageForArticle)
    {
        if (intval($this->shrinkWidthPostImageForArticle) !== intval($shrinkWidthPostImageForArticle)) {
            $this->shrinkWidthPostImageForArticle = intval($shrinkWidthPostImageForArticle);
        }
    }
    
    /**
     * Returns the shrink height post image for article.
     *
     * @return integer
     */
    public function getShrinkHeightPostImageForArticle()
    {
        return $this->shrinkHeightPostImageForArticle;
    }
    
    /**
     * Sets the shrink height post image for article.
     *
     * @param integer $shrinkHeightPostImageForArticle
     *
     * @return void
     */
    public function setShrinkHeightPostImageForArticle($shrinkHeightPostImageForArticle)
    {
        if (intval($this->shrinkHeightPostImageForArticle) !== intval($shrinkHeightPostImageForArticle)) {
            $this->shrinkHeightPostImageForArticle = intval($shrinkHeightPostImageForArticle);
        }
    }
    
    /**
     * Returns the thumbnail mode post image for article.
     *
     * @return string
     */
    public function getThumbnailModePostImageForArticle()
    {
        return $this->thumbnailModePostImageForArticle;
    }
    
    /**
     * Sets the thumbnail mode post image for article.
     *
     * @param string $thumbnailModePostImageForArticle
     *
     * @return void
     */
    public function setThumbnailModePostImageForArticle($thumbnailModePostImageForArticle)
    {
        if ($this->thumbnailModePostImageForArticle !== $thumbnailModePostImageForArticle) {
            $this->thumbnailModePostImageForArticle = isset($thumbnailModePostImageForArticle) ? $thumbnailModePostImageForArticle : '';
        }
    }
    
    /**
     * Returns the thumbnail width post image for article view.
     *
     * @return integer
     */
    public function getThumbnailWidthPostImageForArticleView()
    {
        return $this->thumbnailWidthPostImageForArticleView;
    }
    
    /**
     * Sets the thumbnail width post image for article view.
     *
     * @param integer $thumbnailWidthPostImageForArticleView
     *
     * @return void
     */
    public function setThumbnailWidthPostImageForArticleView($thumbnailWidthPostImageForArticleView)
    {
        if (intval($this->thumbnailWidthPostImageForArticleView) !== intval($thumbnailWidthPostImageForArticleView)) {
            $this->thumbnailWidthPostImageForArticleView = intval($thumbnailWidthPostImageForArticleView);
        }
    }
    
    /**
     * Returns the thumbnail height post image for article view.
     *
     * @return integer
     */
    public function getThumbnailHeightPostImageForArticleView()
    {
        return $this->thumbnailHeightPostImageForArticleView;
    }
    
    /**
     * Sets the thumbnail height post image for article view.
     *
     * @param integer $thumbnailHeightPostImageForArticleView
     *
     * @return void
     */
    public function setThumbnailHeightPostImageForArticleView($thumbnailHeightPostImageForArticleView)
    {
        if (intval($this->thumbnailHeightPostImageForArticleView) !== intval($thumbnailHeightPostImageForArticleView)) {
            $this->thumbnailHeightPostImageForArticleView = intval($thumbnailHeightPostImageForArticleView);
        }
    }
    
    /**
     * Returns the thumbnail width post image for article display.
     *
     * @return integer
     */
    public function getThumbnailWidthPostImageForArticleDisplay()
    {
        return $this->thumbnailWidthPostImageForArticleDisplay;
    }
    
    /**
     * Sets the thumbnail width post image for article display.
     *
     * @param integer $thumbnailWidthPostImageForArticleDisplay
     *
     * @return void
     */
    public function setThumbnailWidthPostImageForArticleDisplay($thumbnailWidthPostImageForArticleDisplay)
    {
        if (intval($this->thumbnailWidthPostImageForArticleDisplay) !== intval($thumbnailWidthPostImageForArticleDisplay)) {
            $this->thumbnailWidthPostImageForArticleDisplay = intval($thumbnailWidthPostImageForArticleDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height post image for article display.
     *
     * @return integer
     */
    public function getThumbnailHeightPostImageForArticleDisplay()
    {
        return $this->thumbnailHeightPostImageForArticleDisplay;
    }
    
    /**
     * Sets the thumbnail height post image for article display.
     *
     * @param integer $thumbnailHeightPostImageForArticleDisplay
     *
     * @return void
     */
    public function setThumbnailHeightPostImageForArticleDisplay($thumbnailHeightPostImageForArticleDisplay)
    {
        if (intval($this->thumbnailHeightPostImageForArticleDisplay) !== intval($thumbnailHeightPostImageForArticleDisplay)) {
            $this->thumbnailHeightPostImageForArticleDisplay = intval($thumbnailHeightPostImageForArticleDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width post image for article edit.
     *
     * @return integer
     */
    public function getThumbnailWidthPostImageForArticleEdit()
    {
        return $this->thumbnailWidthPostImageForArticleEdit;
    }
    
    /**
     * Sets the thumbnail width post image for article edit.
     *
     * @param integer $thumbnailWidthPostImageForArticleEdit
     *
     * @return void
     */
    public function setThumbnailWidthPostImageForArticleEdit($thumbnailWidthPostImageForArticleEdit)
    {
        if (intval($this->thumbnailWidthPostImageForArticleEdit) !== intval($thumbnailWidthPostImageForArticleEdit)) {
            $this->thumbnailWidthPostImageForArticleEdit = intval($thumbnailWidthPostImageForArticleEdit);
        }
    }
    
    /**
     * Returns the thumbnail height post image for article edit.
     *
     * @return integer
     */
    public function getThumbnailHeightPostImageForArticleEdit()
    {
        return $this->thumbnailHeightPostImageForArticleEdit;
    }
    
    /**
     * Sets the thumbnail height post image for article edit.
     *
     * @param integer $thumbnailHeightPostImageForArticleEdit
     *
     * @return void
     */
    public function setThumbnailHeightPostImageForArticleEdit($thumbnailHeightPostImageForArticleEdit)
    {
        if (intval($this->thumbnailHeightPostImageForArticleEdit) !== intval($thumbnailHeightPostImageForArticleEdit)) {
            $this->thumbnailHeightPostImageForArticleEdit = intval($thumbnailHeightPostImageForArticleEdit);
        }
    }
    
    /**
     * Returns the moderation group for posts.
     *
     * @return integer
     */
    public function getModerationGroupForPosts()
    {
        return $this->moderationGroupForPosts;
    }
    
    /**
     * Sets the moderation group for posts.
     *
     * @param integer $moderationGroupForPosts
     *
     * @return void
     */
    public function setModerationGroupForPosts($moderationGroupForPosts)
    {
        if ($this->moderationGroupForPosts !== $moderationGroupForPosts) {
            $this->moderationGroupForPosts = $moderationGroupForPosts;
        }
    }
    
    /**
     * Returns the allow moderation specific creator for post.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForPost()
    {
        return $this->allowModerationSpecificCreatorForPost;
    }
    
    /**
     * Sets the allow moderation specific creator for post.
     *
     * @param boolean $allowModerationSpecificCreatorForPost
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForPost($allowModerationSpecificCreatorForPost)
    {
        if (boolval($this->allowModerationSpecificCreatorForPost) !== boolval($allowModerationSpecificCreatorForPost)) {
            $this->allowModerationSpecificCreatorForPost = boolval($allowModerationSpecificCreatorForPost);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for post.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForPost()
    {
        return $this->allowModerationSpecificCreationDateForPost;
    }
    
    /**
     * Sets the allow moderation specific creation date for post.
     *
     * @param boolean $allowModerationSpecificCreationDateForPost
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForPost($allowModerationSpecificCreationDateForPost)
    {
        if (boolval($this->allowModerationSpecificCreationDateForPost) !== boolval($allowModerationSpecificCreationDateForPost)) {
            $this->allowModerationSpecificCreationDateForPost = boolval($allowModerationSpecificCreationDateForPost);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUBloggingModule');
    
        if (isset($moduleVars['postEntriesPerPage'])) {
            $this->setPostEntriesPerPage($moduleVars['postEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnPostsOnAccountPage'])) {
            $this->setLinkOwnPostsOnAccountPage($moduleVars['linkOwnPostsOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['filterDataByLocale'])) {
            $this->setFilterDataByLocale($moduleVars['filterDataByLocale']);
        }
        if (isset($moduleVars['enableShrinkingForPostImageForArticle'])) {
            $this->setEnableShrinkingForPostImageForArticle($moduleVars['enableShrinkingForPostImageForArticle']);
        }
        if (isset($moduleVars['shrinkWidthPostImageForArticle'])) {
            $this->setShrinkWidthPostImageForArticle($moduleVars['shrinkWidthPostImageForArticle']);
        }
        if (isset($moduleVars['shrinkHeightPostImageForArticle'])) {
            $this->setShrinkHeightPostImageForArticle($moduleVars['shrinkHeightPostImageForArticle']);
        }
        if (isset($moduleVars['thumbnailModePostImageForArticle'])) {
            $this->setThumbnailModePostImageForArticle($moduleVars['thumbnailModePostImageForArticle']);
        }
        if (isset($moduleVars['thumbnailWidthPostImageForArticleView'])) {
            $this->setThumbnailWidthPostImageForArticleView($moduleVars['thumbnailWidthPostImageForArticleView']);
        }
        if (isset($moduleVars['thumbnailHeightPostImageForArticleView'])) {
            $this->setThumbnailHeightPostImageForArticleView($moduleVars['thumbnailHeightPostImageForArticleView']);
        }
        if (isset($moduleVars['thumbnailWidthPostImageForArticleDisplay'])) {
            $this->setThumbnailWidthPostImageForArticleDisplay($moduleVars['thumbnailWidthPostImageForArticleDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightPostImageForArticleDisplay'])) {
            $this->setThumbnailHeightPostImageForArticleDisplay($moduleVars['thumbnailHeightPostImageForArticleDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthPostImageForArticleEdit'])) {
            $this->setThumbnailWidthPostImageForArticleEdit($moduleVars['thumbnailWidthPostImageForArticleEdit']);
        }
        if (isset($moduleVars['thumbnailHeightPostImageForArticleEdit'])) {
            $this->setThumbnailHeightPostImageForArticleEdit($moduleVars['thumbnailHeightPostImageForArticleEdit']);
        }
        if (isset($moduleVars['moderationGroupForPosts'])) {
            $this->setModerationGroupForPosts($moduleVars['moderationGroupForPosts']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForPost'])) {
            $this->setAllowModerationSpecificCreatorForPost($moduleVars['allowModerationSpecificCreatorForPost']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForPost'])) {
            $this->setAllowModerationSpecificCreationDateForPost($moduleVars['allowModerationSpecificCreationDateForPost']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForPosts();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForPosts($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForPosts();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForPosts($group);
    
        $this->variableApi->set('MUBloggingModule', 'postEntriesPerPage', $this->getPostEntriesPerPage());
        $this->variableApi->set('MUBloggingModule', 'linkOwnPostsOnAccountPage', $this->getLinkOwnPostsOnAccountPage());
        $this->variableApi->set('MUBloggingModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUBloggingModule', 'filterDataByLocale', $this->getFilterDataByLocale());
        $this->variableApi->set('MUBloggingModule', 'enableShrinkingForPostImageForArticle', $this->getEnableShrinkingForPostImageForArticle());
        $this->variableApi->set('MUBloggingModule', 'shrinkWidthPostImageForArticle', $this->getShrinkWidthPostImageForArticle());
        $this->variableApi->set('MUBloggingModule', 'shrinkHeightPostImageForArticle', $this->getShrinkHeightPostImageForArticle());
        $this->variableApi->set('MUBloggingModule', 'thumbnailModePostImageForArticle', $this->getThumbnailModePostImageForArticle());
        $this->variableApi->set('MUBloggingModule', 'thumbnailWidthPostImageForArticleView', $this->getThumbnailWidthPostImageForArticleView());
        $this->variableApi->set('MUBloggingModule', 'thumbnailHeightPostImageForArticleView', $this->getThumbnailHeightPostImageForArticleView());
        $this->variableApi->set('MUBloggingModule', 'thumbnailWidthPostImageForArticleDisplay', $this->getThumbnailWidthPostImageForArticleDisplay());
        $this->variableApi->set('MUBloggingModule', 'thumbnailHeightPostImageForArticleDisplay', $this->getThumbnailHeightPostImageForArticleDisplay());
        $this->variableApi->set('MUBloggingModule', 'thumbnailWidthPostImageForArticleEdit', $this->getThumbnailWidthPostImageForArticleEdit());
        $this->variableApi->set('MUBloggingModule', 'thumbnailHeightPostImageForArticleEdit', $this->getThumbnailHeightPostImageForArticleEdit());
        $this->variableApi->set('MUBloggingModule', 'moderationGroupForPosts', $this->getModerationGroupForPosts());
        $this->variableApi->set('MUBloggingModule', 'allowModerationSpecificCreatorForPost', $this->getAllowModerationSpecificCreatorForPost());
        $this->variableApi->set('MUBloggingModule', 'allowModerationSpecificCreationDateForPost', $this->getAllowModerationSpecificCreationDateForPost());
        $this->variableApi->set('MUBloggingModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
