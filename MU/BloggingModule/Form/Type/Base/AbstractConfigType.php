<?php
/**
 * Blogging.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BloggingModule\Form\Type\Base;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\BloggingModule\Form\Type\Field\MultiListType;
use MU\BloggingModule\AppSettings;
use MU\BloggingModule\Helper\ListEntriesHelper;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listHelper
    ) {
        $this->setTranslator($translator);
        $this->listHelper = $listHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addListViewsFields($builder, $options);
        $this->addImagesFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('postEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Post entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of posts shown per page')
            ],
            'help' => $this->__('The amount of posts shown per page'),
            'empty_data' => 10,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the post entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnPostsOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own posts on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to posts of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to posts of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own posts on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('showOnlyOwnEntries', CheckboxType::class, [
            'label' => $this->__('Show only own entries') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether only own entries should be shown on view pages by default or not')
            ],
            'help' => $this->__('Whether only own entries should be shown on view pages by default or not'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The show only own entries option')
            ],
            'required' => false,
        ]);
        
        $builder->add('filterDataByLocale', CheckboxType::class, [
            'label' => $this->__('Filter data by locale') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether automatically filter data in the frontend based on the current locale or not')
            ],
            'help' => $this->__('Whether automatically filter data in the frontend based on the current locale or not'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The filter data by locale option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for images fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('enableShrinkingForPostImageForArticle', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for post image for article') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthPostImageForArticle', IntegerType::class, [
            'label' => $this->__('Shrink width post image for article') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => 800,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightPostImageForArticle', IntegerType::class, [
            'label' => $this->__('Shrink height post image for article') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => 600,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModePostImageForArticle');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModePostImageForArticle', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode post image for article') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => 'inset',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthPostImageForArticleView', IntegerType::class, [
            'label' => $this->__('Thumbnail width post image for article view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => 32,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostImageForArticleView', IntegerType::class, [
            'label' => $this->__('Thumbnail height post image for article view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => 24,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostImageForArticleDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width post image for article display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostImageForArticleDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height post image for article display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostImageForArticleEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width post image for article edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => 240,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostImageForArticleEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height post image for article edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => 180,
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('moderationGroupForPosts', EntityType::class, [
            'label' => $this->__('Moderation group for posts') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
            ],
            'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
            'empty_data' => 2,
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Choose the moderation group for posts')
            ],
            'required' => true,
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'ZikulaGroupsModule:GroupEntity',
            'choice_label' => 'name',
            'choice_value' => 'gid'
        ]);
        
        $builder->add('allowModerationSpecificCreatorForPost', CheckboxType::class, [
            'label' => $this->__('Allow moderation specific creator for post') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to allow moderators choosing a user which will be set as creator.')
            ],
            'help' => $this->__('Whether to allow moderators choosing a user which will be set as creator.'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The allow moderation specific creator for post option')
            ],
            'required' => false,
        ]);
        
        $builder->add('allowModerationSpecificCreationDateForPost', CheckboxType::class, [
            'label' => $this->__('Allow moderation specific creation date for post') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to allow moderators choosing a custom creation date.')
            ],
            'help' => $this->__('Whether to allow moderators choosing a custom creation date.'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The allow moderation specific creation date for post option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'enabledFinderTypes');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('enabledFinderTypes', MultiListType::class, [
            'label' => $this->__('Enabled finder types') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
            ],
            'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
            'empty_data' => 'post',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the enabled finder types.')
            ],
            'required' => false,
            'placeholder' => $this->__('Choose an option'),
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('save', SubmitType::class, [
            'label' => $this->__('Update configuration'),
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'mubloggingmodule_config';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data
                'data_class' => AppSettings::class,
            ]);
    }
}
