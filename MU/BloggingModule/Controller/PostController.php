<?php
/**
 * Blogging.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BloggingModule\Controller;

use MU\BloggingModule\Controller\Base\AbstractPostController;

use RuntimeException;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use MU\BloggingModule\Entity\PostEntity;
use MU\BloggingModule\Helper\FeatureActivationHelper;

/**
 * Post controller class providing navigation and interaction functionality.
 */
class PostController extends AbstractPostController
{
    /**
     * @inheritDoc
     *
     * @Route("/admin/posts",
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     */
    public function adminIndexAction(Request $request)
    {
        return parent::adminIndexAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/posts",
     *        methods = {"GET"}
     * )
     */
    public function indexAction(Request $request)
    {
        return parent::indexAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/posts/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|rss"},
     *        defaults = {"sort" = "", "sortdir" = "desc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     */
    public function adminViewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::adminViewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/posts/view/{sort}/{sortdir}/{pos}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "pos" = "\d+", "num" = "\d+", "_format" = "html|rss"},
     *        defaults = {"sort" = "", "sortdir" = "desc", "pos" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     *
     * @param Request $request Current request instance
     * @param string $sort         Sorting field
     * @param string $sortdir      Sorting direction
     * @param int    $pos          Current pager position
     * @param int    $num          Amount of entries to display
     *
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function viewAction(Request $request, $sort, $sortdir, $pos, $num)
    {
        return parent::viewAction($request, $sort, $sortdir, $pos, $num);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/post/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminEditAction(Request $request)
    {
        return parent::adminEditAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/post/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function editAction(Request $request)
    {
        return parent::editAction($request);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/post/delete/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminDeleteAction(Request $request, $slug)
    {
        return parent::adminDeleteAction($request, $slug);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/post/delete/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function deleteAction(Request $request, $slug)
    {
        return parent::deleteAction($request, $slug);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/admin/post/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     */
    public function adminDisplayAction(Request $request, $slug)
    {
        return parent::adminDisplayAction($request, $slug);
    }
    
    /**
     * @inheritDoc
     *
     * @Route("/post/{slug}.{_format}",
     *        requirements = {"slug" = "[^/.]+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET"}
     * )
     */
    public function displayAction(Request $request, $slug)
    {
        return parent::displayAction($request, $slug);
    }
    
    /**
     * @inheritDoc
     * @Route("/admin/posts/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     * @Theme("admin")
     */
    public function adminHandleSelectedEntriesAction(Request $request)
    {
        return parent::adminHandleSelectedEntriesAction($request);
    }
    
    /**
     * @inheritDoc
     * @Route("/posts/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     */
    public function handleSelectedEntriesAction(Request $request)
    {
        return parent::handleSelectedEntriesAction($request);
    }
    
    /**
     * This method includes the common implementation code for adminDisplay() and display().
     */
    protected function displayInternal(Request $request, PostEntity $post, $isAdmin = false)
    {
        $objectType = 'post';
        // permission check
        $permLevel = $isAdmin ? ACCESS_ADMIN : ACCESS_READ;
        $permissionHelper = $this->get('mu_blogging_module.permission_helper');
        if (!$permissionHelper->hasEntityPermission($post, $permLevel)) {
            throw new AccessDeniedException();
        }
        
        if ($post->getWorkflowState() != 'approved' && !$permissionHelper->hasEntityPermission($post, ACCESS_ADMIN)) {
            throw new AccessDeniedException();
        }
        
        $featureActivationHelper = $this->get('mu_blogging_module.feature_activation_helper');
        if ($featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, $objectType)) {
            if (!$this->get('mu_blogging_module.category_helper')->hasPermission($post)) {
                throw new AccessDeniedException();
            }
        }
        
        $templateParameters = [
            'routeArea' => $isAdmin ? 'admin' : '',
            $objectType => $post
        ];
        
        $controllerHelper = $this->get('mu_blogging_module.controller_helper');
        $templateParameters = $controllerHelper->processDisplayActionParameters($objectType, $templateParameters, $post->supportsHookSubscribers());
        
        $repository = $this->get('mu_blogging_module.entity_factory')->getRepository('post');
        
        $articles = $post['relevantArticles'];

        if ($articles != '') {
            $relevantArticles = array();
            $relevantArticlesArray = explode(',', $articles);
            foreach ($relevantArticlesArray as $postId) {
                $thisPost = $repository->selectById($postId);
                if (isset($thisPost)) {
                    $relevantArticles[] = $thisPost;
                }
            }
            if(count($relevantArticles) > 0) {
                $templateParameters['relevantPosts'] = $relevantArticles;
            }
            
        }
        
        // fetch and return the appropriate template
        $response = $this->get('mu_blogging_module.view_helper')->processTemplate($objectType, 'display', $templateParameters);
        
        return $response;
    }
    
    // feel free to add your own controller methods here
}
