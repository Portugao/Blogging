<?php

/**
 * Blogging.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link http://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */
namespace MU\BloggingModule\Helper;

use MU\BloggingModule\Helper\Base\AbstractListEntriesHelper;
use MU\BloggingModule\Entity\Factory\EntityFactory;

/**
 * Helper implementation class for list field entries related methods.
 */
class ListEntriesHelper extends AbstractListEntriesHelper {
	/**
	 *
	 * @var EntityFactory
	 */
	protected $entityFactory;
	
	/**
	 */
	public function resolve($value, $objectType = '', $fieldName = '', $delimiter = ', ') {
		if ((empty ( $value ) && $value != '0') || empty ( $objectType ) || empty ( $fieldName )) {
			return $value;
		}
		
		$isMulti = $this->hasMultipleSelection ( $objectType, $fieldName );
		if (true === $isMulti) {
			$value = $this->extractMultiList ( $value );
		}
		
		$options = $this->getEntries ( $objectType, $fieldName );
		$result = '';
		
		$repository = $this->entityFactory->getRepository ( 'post' );
		
		if (true === $isMulti) {
			if ($fieldName != 'similarArticles') {
				foreach ( $options as $option ) {
					if (! in_array ( $option ['value'], $value )) {
						continue;
					}
					if (! empty ( $result )) {
						$result .= $delimiter;
					}
					$result .= $option ['text'];
				}
			} else {
				foreach ( $options as $option ) {
					if (! in_array ( $option ['value'], $value )) {
						continue;
					}
					if ($option['value'] != 'none') {
					$post = $repository->find ( $option ['value'] );
					$result [] = $post;
					}
				}
			}
		} else {
			foreach ( $options as $option ) {
				if ($option ['value'] != $value) {
					continue;
				}
				$result = $option ['text'];
				break;
			}
		}
		
		return $result;
	}
	
	/**
	 * Get 'similar articles' list entries.
	 *
	 * @return array Array with desired list entries
	 */
	public function getSimilarArticlesEntriesForPost() {
		$postRepository = $this->entityFactory->getRepository ( 'post' );
		$posts = $postRepository->selectWhere ();
		
		$states [] = [ 
				'value' => 'none',
				'text' => $this->__ ( 'None' ),
				'title' => '',
				'image' => '',
				'default' => true 
		];
		foreach ( $posts as $post ) {
			$thisPost = $postRepository->find ( $post ['id'] );
			
			$states [] = [ 
					'value' => $thisPost ['id'],
					'text' => $thisPost ['title'],
					'title' => '',
					'image' => '',
					'default' => false 
			];
		}
		
		return $states;
	}
	public function setEntityFactory(EntityFactory $entityFactory) {
		$this->entityFactory = $entityFactory;
	}
}
